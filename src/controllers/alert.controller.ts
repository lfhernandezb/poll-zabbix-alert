import { NextFunction, Request, Response, RequestHandler } from "express";
import { PollResponse, Result } from "../model/response.model";
import { queryAllAlerts, queryAlertById, queryHostByTriggerId } from "../services/zabbix.service";
import { plainToInstance } from "class-transformer";
import { getHostByTriggerId } from "./host.controller";
import axios from "axios";
import { handleAxiosError } from "../handlers/handle-axios-error";
import { Alert } from "../model/alert.model";
/*
export const welcome: (req: Request, res: Response, next: NextFunction) => void = (req, res, next) => {
    // Your implementation
    res.send("Welcome!");
};
*/
// async function getAllAlerts(req: Request, res: Response, next: NextFunction): Promise<Response<any, Record<string, any>> | undefined> {
export const getAllAlerts: (req: Request, res: Response, next: NextFunction) => Promise<void> = async (req, res, next) => {
    // Your implementation
    try {
        
        const resp = await queryAllAlerts();
        const pollResponse = resp.data;
        // console.log(resp.data);
        const alerts: Alert[] = await parseZabbixResponse(pollResponse);
        console.log("alerts.length: " + alerts.length);
        res.status(200).json(alerts); //json({ message: "Ok" });
        
    } catch (error: any) {
        next(error); // Pass the error to the middleware
    }
        
};

// async function getAlertById(req: Request, res: Response, next: NextFunction): Promise<Response<any, Record<string, any>> | undefined> {
export const getAlertById: RequestHandler = async (req: Request, res: Response, next: NextFunction) => {
    // Your implementation
    try {
        
        const id = parseInt(req.params.id, 0);
        const resp = await queryAlertById(id);
        const pollResponse = resp.data;
        // console.log(resp.data);
        const alerts: Alert[] = await parseZabbixResponse(pollResponse);
        console.log("alerts.length: " + alerts.length);
        
        res.status(200).json(alerts); // json({ message: "Ok" });

    } catch (error: any) {
        next(error); // Pass the error to the middleware    
    }
};

async function parseZabbixResponse(pollResponse: PollResponse): Promise<Alert[]> {
    const alertArray: Alert[] = [];

    const zabixResp = plainToInstance(PollResponse, JSON.parse(JSON.stringify(pollResponse)), {
        excludeExtraneousValues: false,
    });

    // console.log(zabixResp);

    if (zabixResp.result && zabixResp.result.length > 0) {

        for (const res of zabixResp.result) {
            if (res.source === "0") {
                // generated by trigger
                const triggerId = res.objectid;

                if (triggerId) {
                    const pollResp = await queryHostByTriggerId(triggerId);
                    // console.log(pollResp.data);
                    const zabixRes = plainToInstance(PollResponse, JSON.parse(JSON.stringify(pollResp.data)), {
                        excludeExtraneousValues: false,
                    });

                    if (zabixRes && zabixRes.result && zabixRes.result.length > 0) {
                        const alert: Alert = {
                            id: res.eventid,
                            description: res.name,
                            hostName: zabixRes.result[0].name,
                            severity: res.severity,
                            clock: res.clock,
                            acknowledged: res.acknowledged,
                            userid: res.userid,
                        };

                        alertArray.push(alert);

                        console.log("alertArray.length: " + alertArray.length);
                
                        console.log("Problem");
                        console.log("eventid: " + res.eventid);
                        console.log("source: " + res.source);
                        console.log("objectid: " + res.objectid);
                        console.log("problem name: " + res.name);
                        console.log("host name: " + zabixRes.result[0].name);
                        console.log("hostid: " + zabixRes.result[0].hostid);
                    }
                }
            }
        }
    }
    
    return alertArray;
}